#include <iostream>
#include <random>
#include <bitset>
#include <iomanip>
#include <cstdint>
const uint8_t sbox[256] = {
    // 0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
    0b01100011, 0b01111100, 0b01110111, 0b01111011, 0b11110010, 0b01101011, 0b01101111, 0b11000101, // 0
    0b00110000, 0b00000001, 0b01100111, 0b00101011, 0b11111110, 0b11010111, 0b10101011, 0b01110110, // 1
    0b11001010, 0b10000010, 0b11001001, 0b01111101, 0b11111010, 0b01011001, 0b01000111, 0b11110000, // 2
    0b10101101, 0b11010100, 0b10100010, 0b10101111, 0b10011100, 0b10100100, 0b01110010, 0b11000000, // 3
    0b10110111, 0b11111101, 0b10010011, 0b00100110, 0b00110110, 0b00111111, 0b11110111, 0b11001100, // 4
    0b00110100, 0b10100101, 0b11100101, 0b11110001, 0b01110001, 0b11011000, 0b00110001, 0b00010101, // 5
    0b00000100, 0b11000111, 0b00100011, 0b11000011, 0b00011000, 0b10010110, 0b00000101, 0b10011010, // 6
    0b00000111, 0b00010010, 0b10000000, 0b11100010, 0b11101011, 0b00100111, 0b10110010, 0b01110101, // 7
    0b00001001, 0b10000011, 0b00101100, 0b00011010, 0b00011011, 0b01101110, 0b01011010, 0b10100000, // 8
    0b01010010, 0b00111011, 0b11010110, 0b10110011, 0b00101001, 0b11100011, 0b00101111, 0b10000100, // 9
    0b01010011, 0b11010001, 0b00000000, 0b11101101, 0b00100000, 0b11111100, 0b10110001, 0b01011011, // A
    0b01101010, 0b11001011, 0b10111110, 0b00111001, 0b01001010, 0b01001100, 0b01011000, 0b11001111, // B
    0b11010000, 0b11101111, 0b10101010, 0b11111011, 0b01000011, 0b01001101, 0b00110011, 0b10000101, // C
    0b01000101, 0b11111001, 0b00000010, 0b01111111, 0b01010000, 0b00111100, 0b10011111, 0b10101000, // D
    0b01010001, 0b10100011, 0b01000000, 0b10001111, 0b10010010, 0b10011101, 0b00111000, 0b11110101, // E
    0b10111100, 0b10110110, 0b11011010, 0b00100001, 0b00010000, 0b11111111, 0b11110011, 0b11010010  // F
};

const uint8_t rcon[256] = {
    // 0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
    0b10001101, 0b00000001, 0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01000000, // 0
    0b10000000, 0b00011011, 0b00110110, 0b01101100, 0b11011000, 0b10101011, 0b01001101, 0b10011010, // 1
    0b00101111, 0b01011110, 0b10111100, 0b1100011, 0b11011000, 0b10010111, 0b01110101, 0b1101010,   // 2
    0b11010011, 0b10110011, 0b01111101, 0b11111010, 0b11101111, 0b11000101, 0b10010001, 0b00111001, // 3
    0b01110010, 0b11100100, 0b11010011, 0b10111101, 0b01100001, 0b11000010, 0b10011111, 0b00100101, // 4
    0b01001010, 0b10010100, 0b00110011, 0b01100110, 0b11001100, 0b10000011, 0b00011101, 0b00111010, // 5
    0b01110100, 0b11101000, 0b11001011, 0b10001101, 0b00000001, 0b00000010, 0b00000100, 0b00001000, // 6
    0b00010000, 0b00100000, 0b01000000, 0b10000000, 0b00011011, 0b00110110, 0b01101100, 0b11011000, // 7
    0b10101011, 0b01001101, 0b10011010, 0b00101111, 0b01011110, 0b10111100, 0b1100011, 0b11011000,  // 8
    0b10010111, 0b01110101, 0b1101010, 0b11010011, 0b10110011, 0b01111101, 0b11111010, 0b11101111,  // 9
    0b11000101, 0b10010001, 0b00111001, 0b01110010, 0b11100100, 0b11010011, 0b10111101, 0b01100001, // A
    0b11000010, 0b10011111, 0b00100101, 0b01001010, 0b10010100, 0b00110011, 0b01100110, 0b11001100, // B
    0b10000011, 0b00011101, 0b00111010, 0b01110100, 0b11101000, 0b11001011, 0b10001101, 0b00000001, // C
    0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01000000, 0b10000000, 0b00011011, // D
    0b00110110, 0b01101100, 0b11011000, 0b10101011, 0b01001101, 0b10011010, 0b00101111, 0b01011110, // E
    0b10111100, 0b1100011, 0b11011000, 0b10010111, 0b01110101, 0b1101010, 0b11010011, 0b10110011    // F
};
